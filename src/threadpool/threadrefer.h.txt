#pragma once

#include <condition_variable>
#include <functional>
#include <future>
#include <memory>
#include <mutex>
#include <queue>
#include <stdexcept>
#include <thread>
#include <vector>
#include <string>

class ThreadPool_2 {
public:
    ThreadPool_2(size_t, std::string);
    template <class F, class... Args>
    auto enqueue(F &&f, Args &&...args) -> std::future<typename std::result_of<F(Args...)>::type>;
    ~ThreadPool_2();

    void stop(void);

private:
    // need to keep track of threads so we can join them
    std::vector<std::thread> workers;
    // the task queue
    std::queue<std::function<void()>> tasks;

    // synchronization
    std::mutex              queue_mutex;
    std::condition_variable condition;
    bool                    stop_;
};

// the constructor just launches some amount of workers
inline ThreadPool_2::ThreadPool_2(size_t threads, std::string name /* = "ThreadPool_2"*/)
    : stop_(false) {
    for (size_t i = 0; i < threads; ++i) {
        std::string trd_name = name + std::to_string(i);
        workers.emplace_back(std::thread([this, trd_name] {

            pthread_setname_np(pthread_self(), trd_name.substr(0, 16).c_str());

            for (;;) {
                std::function<void()> task;

                {
                    std::unique_lock<std::mutex> lock(this->queue_mutex);
                    this->condition.wait(lock, [this] { return this->stop_ || !this->tasks.empty(); });
                    if (this->stop_ && this->tasks.empty())
                        return;
                    task = std::move(this->tasks.front());
                    this->tasks.pop();
                }

                task();
            }
        }));
    }
}

// add new work item to the pool
template <class F, class... Args>
auto ThreadPool_2::enqueue(F &&f, Args &&...args) -> std::future<typename std::result_of<F(Args...)>::type> {
    using return_type = typename std::result_of<F(Args...)>::type;

    auto task = std::make_shared<std::packaged_task<return_type()>>(
        std::bind(std::forward<F>(f), std::forward<Args>(args)...));

    std::future<return_type> res = task->get_future();
    {
        std::unique_lock<std::mutex> lock(queue_mutex);

        // don't allow enqueueing after stopping the pool
        if (stop_)
            throw std::runtime_error("enqueue on stopped ThreadPool_2");

        tasks.emplace([task]() { (*task)(); });
    }
    condition.notify_one();
    return res;
}

// the destructor joins all threads
inline ThreadPool_2::~ThreadPool_2() {
    stop();
}

inline void ThreadPool_2::stop() {
    {
        std::unique_lock<std::mutex> lock(queue_mutex);
        if (stop_) {
            return;
        }

        stop_ = true;
    }

    condition.notify_all();
    for (std::thread &worker : workers) {
        worker.join();
    }
}
