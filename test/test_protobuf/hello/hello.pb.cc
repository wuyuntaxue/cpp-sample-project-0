// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#include "hello.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace SCH {
PROTOBUF_CONSTEXPR Student_PhoneNumber::Student_PhoneNumber(
    ::_pbi::ConstantInitialized)
  : number_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)
{}
struct Student_PhoneNumberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Student_PhoneNumberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Student_PhoneNumberDefaultTypeInternal() {}
  union {
    Student_PhoneNumber _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Student_PhoneNumberDefaultTypeInternal _Student_PhoneNumber_default_instance_;
PROTOBUF_CONSTEXPR Student_Remark::Student_Remark(
    ::_pbi::ConstantInitialized)
  : describe_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rank_(0){}
struct Student_RemarkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Student_RemarkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Student_RemarkDefaultTypeInternal() {}
  union {
    Student_Remark _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Student_RemarkDefaultTypeInternal _Student_Remark_default_instance_;
PROTOBUF_CONSTEXPR Student::Student(
    ::_pbi::ConstantInitialized)
  : phone_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , email_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , remark_(nullptr)
  , id_(uint64_t{0u}){}
struct StudentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StudentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StudentDefaultTypeInternal() {}
  union {
    Student _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StudentDefaultTypeInternal _Student_default_instance_;
}  // namespace SCH
static ::_pb::Metadata file_level_metadata_hello_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_hello_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_hello_2eproto = nullptr;

const uint32_t TableStruct_hello_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SCH::Student_PhoneNumber, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SCH::Student_PhoneNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SCH::Student_PhoneNumber, number_),
  PROTOBUF_FIELD_OFFSET(::SCH::Student_PhoneNumber, type_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SCH::Student_Remark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SCH::Student_Remark, describe_),
  PROTOBUF_FIELD_OFFSET(::SCH::Student_Remark, rank_),
  PROTOBUF_FIELD_OFFSET(::SCH::Student, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SCH::Student, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SCH::Student, id_),
  PROTOBUF_FIELD_OFFSET(::SCH::Student, name_),
  PROTOBUF_FIELD_OFFSET(::SCH::Student, email_),
  PROTOBUF_FIELD_OFFSET(::SCH::Student, phone_),
  PROTOBUF_FIELD_OFFSET(::SCH::Student, remark_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::SCH::Student_PhoneNumber)},
  { 10, -1, -1, sizeof(::SCH::Student_Remark)},
  { 18, 29, -1, sizeof(::SCH::Student)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::SCH::_Student_PhoneNumber_default_instance_._instance,
  &::SCH::_Student_Remark_default_instance_._instance,
  &::SCH::_Student_default_instance_._instance,
};

const char descriptor_table_protodef_hello_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013hello.proto\022\003SCH\"\257\002\n\007Student\022\n\n\002id\030\001 \001"
  "(\004\022\014\n\004name\030\002 \001(\t\022\022\n\005email\030\003 \001(\tH\000\210\001\001\022\'\n\005"
  "phone\030\004 \003(\0132\030.SCH.Student.PhoneNumber\022#\n"
  "\006remark\030\005 \001(\0132\023.SCH.Student.Remark\032Q\n\013Ph"
  "oneNumber\022\016\n\006number\030\001 \001(\t\022)\n\004type\030\002 \001(\0162"
  "\026.SCH.Student.PhoneTypeH\000\210\001\001B\007\n\005_type\032(\n"
  "\006Remark\022\020\n\010describe\030\001 \001(\t\022\014\n\004rank\030\002 \001(\005\""
  "!\n\tPhoneType\022\n\n\006MOBILE\020\000\022\010\n\004HOME\020\001B\010\n\006_e"
  "mailb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_hello_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hello_2eproto = {
    false, false, 332, descriptor_table_protodef_hello_2eproto,
    "hello.proto",
    &descriptor_table_hello_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_hello_2eproto::offsets,
    file_level_metadata_hello_2eproto, file_level_enum_descriptors_hello_2eproto,
    file_level_service_descriptors_hello_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hello_2eproto_getter() {
  return &descriptor_table_hello_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hello_2eproto(&descriptor_table_hello_2eproto);
namespace SCH {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Student_PhoneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hello_2eproto);
  return file_level_enum_descriptors_hello_2eproto[0];
}
bool Student_PhoneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Student_PhoneType Student::MOBILE;
constexpr Student_PhoneType Student::HOME;
constexpr Student_PhoneType Student::PhoneType_MIN;
constexpr Student_PhoneType Student::PhoneType_MAX;
constexpr int Student::PhoneType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Student_PhoneNumber::_Internal {
 public:
  using HasBits = decltype(std::declval<Student_PhoneNumber>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Student_PhoneNumber::Student_PhoneNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SCH.Student.PhoneNumber)
}
Student_PhoneNumber::Student_PhoneNumber(const Student_PhoneNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_number().empty()) {
    number_.Set(from._internal_number(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:SCH.Student.PhoneNumber)
}

inline void Student_PhoneNumber::SharedCtor() {
number_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  number_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

Student_PhoneNumber::~Student_PhoneNumber() {
  // @@protoc_insertion_point(destructor:SCH.Student.PhoneNumber)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Student_PhoneNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  number_.Destroy();
}

void Student_PhoneNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Student_PhoneNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:SCH.Student.PhoneNumber)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_.ClearToEmpty();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Student_PhoneNumber::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SCH.Student.PhoneNumber.number"));
        } else
          goto handle_unusual;
        continue;
      // optional .SCH.Student.PhoneType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::SCH::Student_PhoneType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Student_PhoneNumber::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCH.Student.PhoneNumber)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string number = 1;
  if (!this->_internal_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SCH.Student.PhoneNumber.number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_number(), target);
  }

  // optional .SCH.Student.PhoneType type = 2;
  if (_internal_has_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCH.Student.PhoneNumber)
  return target;
}

size_t Student_PhoneNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCH.Student.PhoneNumber)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string number = 1;
  if (!this->_internal_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // optional .SCH.Student.PhoneType type = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Student_PhoneNumber::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Student_PhoneNumber::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Student_PhoneNumber::GetClassData() const { return &_class_data_; }

void Student_PhoneNumber::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Student_PhoneNumber *>(to)->MergeFrom(
      static_cast<const Student_PhoneNumber &>(from));
}


void Student_PhoneNumber::MergeFrom(const Student_PhoneNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCH.Student.PhoneNumber)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_number().empty()) {
    _internal_set_number(from._internal_number());
  }
  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Student_PhoneNumber::CopyFrom(const Student_PhoneNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCH.Student.PhoneNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Student_PhoneNumber::IsInitialized() const {
  return true;
}

void Student_PhoneNumber::InternalSwap(Student_PhoneNumber* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &number_, lhs_arena,
      &other->number_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Student_PhoneNumber::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hello_2eproto_getter, &descriptor_table_hello_2eproto_once,
      file_level_metadata_hello_2eproto[0]);
}

// ===================================================================

class Student_Remark::_Internal {
 public:
};

Student_Remark::Student_Remark(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SCH.Student.Remark)
}
Student_Remark::Student_Remark(const Student_Remark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  describe_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    describe_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_describe().empty()) {
    describe_.Set(from._internal_describe(), 
      GetArenaForAllocation());
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:SCH.Student.Remark)
}

inline void Student_Remark::SharedCtor() {
describe_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  describe_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rank_ = 0;
}

Student_Remark::~Student_Remark() {
  // @@protoc_insertion_point(destructor:SCH.Student.Remark)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Student_Remark::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  describe_.Destroy();
}

void Student_Remark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Student_Remark::Clear() {
// @@protoc_insertion_point(message_clear_start:SCH.Student.Remark)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  describe_.ClearToEmpty();
  rank_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Student_Remark::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string describe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_describe();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SCH.Student.Remark.describe"));
        } else
          goto handle_unusual;
        continue;
      // int32 rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Student_Remark::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCH.Student.Remark)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_describe().data(), static_cast<int>(this->_internal_describe().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SCH.Student.Remark.describe");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_describe(), target);
  }

  // int32 rank = 2;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCH.Student.Remark)
  return target;
}

size_t Student_Remark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCH.Student.Remark)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string describe = 1;
  if (!this->_internal_describe().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_describe());
  }

  // int32 rank = 2;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Student_Remark::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Student_Remark::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Student_Remark::GetClassData() const { return &_class_data_; }

void Student_Remark::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Student_Remark *>(to)->MergeFrom(
      static_cast<const Student_Remark &>(from));
}


void Student_Remark::MergeFrom(const Student_Remark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCH.Student.Remark)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_describe().empty()) {
    _internal_set_describe(from._internal_describe());
  }
  if (from._internal_rank() != 0) {
    _internal_set_rank(from._internal_rank());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Student_Remark::CopyFrom(const Student_Remark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCH.Student.Remark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Student_Remark::IsInitialized() const {
  return true;
}

void Student_Remark::InternalSwap(Student_Remark* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &describe_, lhs_arena,
      &other->describe_, rhs_arena
  );
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Student_Remark::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hello_2eproto_getter, &descriptor_table_hello_2eproto_once,
      file_level_metadata_hello_2eproto[1]);
}

// ===================================================================

class Student::_Internal {
 public:
  using HasBits = decltype(std::declval<Student>()._has_bits_);
  static void set_has_email(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SCH::Student_Remark& remark(const Student* msg);
};

const ::SCH::Student_Remark&
Student::_Internal::remark(const Student* msg) {
  return *msg->remark_;
}
Student::Student(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  phone_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:SCH.Student)
}
Student::Student(const Student& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      phone_(from.phone_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email()) {
    email_.Set(from._internal_email(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_remark()) {
    remark_ = new ::SCH::Student_Remark(*from.remark_);
  } else {
    remark_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:SCH.Student)
}

inline void Student::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
email_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  email_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&remark_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&remark_)) + sizeof(id_));
}

Student::~Student() {
  // @@protoc_insertion_point(destructor:SCH.Student)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Student::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  email_.Destroy();
  if (this != internal_default_instance()) delete remark_;
}

void Student::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Student::Clear() {
// @@protoc_insertion_point(message_clear_start:SCH.Student)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phone_.Clear();
  name_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    email_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && remark_ != nullptr) {
    delete remark_;
  }
  remark_ = nullptr;
  id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Student::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SCH.Student.name"));
        } else
          goto handle_unusual;
        continue;
      // optional string email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SCH.Student.email"));
        } else
          goto handle_unusual;
        continue;
      // repeated .SCH.Student.PhoneNumber phone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phone(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .SCH.Student.Remark remark = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_remark(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Student::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SCH.Student)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SCH.Student.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string email = 3;
  if (_internal_has_email()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SCH.Student.email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_email(), target);
  }

  // repeated .SCH.Student.PhoneNumber phone = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_phone_size()); i < n; i++) {
    const auto& repfield = this->_internal_phone(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .SCH.Student.Remark remark = 5;
  if (this->_internal_has_remark()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::remark(this),
        _Internal::remark(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCH.Student)
  return target;
}

size_t Student::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCH.Student)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SCH.Student.PhoneNumber phone = 4;
  total_size += 1UL * this->_internal_phone_size();
  for (const auto& msg : this->phone_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // optional string email = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // .SCH.Student.Remark remark = 5;
  if (this->_internal_has_remark()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remark_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Student::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Student::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Student::GetClassData() const { return &_class_data_; }

void Student::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Student *>(to)->MergeFrom(
      static_cast<const Student &>(from));
}


void Student::MergeFrom(const Student& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCH.Student)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  phone_.MergeFrom(from.phone_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_email()) {
    _internal_set_email(from._internal_email());
  }
  if (from._internal_has_remark()) {
    _internal_mutable_remark()->::SCH::Student_Remark::MergeFrom(from._internal_remark());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Student::CopyFrom(const Student& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCH.Student)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Student::IsInitialized() const {
  return true;
}

void Student::InternalSwap(Student* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  phone_.InternalSwap(&other->phone_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &email_, lhs_arena,
      &other->email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Student, id_)
      + sizeof(Student::id_)
      - PROTOBUF_FIELD_OFFSET(Student, remark_)>(
          reinterpret_cast<char*>(&remark_),
          reinterpret_cast<char*>(&other->remark_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Student::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hello_2eproto_getter, &descriptor_table_hello_2eproto_once,
      file_level_metadata_hello_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace SCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SCH::Student_PhoneNumber*
Arena::CreateMaybeMessage< ::SCH::Student_PhoneNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCH::Student_PhoneNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::SCH::Student_Remark*
Arena::CreateMaybeMessage< ::SCH::Student_Remark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCH::Student_Remark >(arena);
}
template<> PROTOBUF_NOINLINE ::SCH::Student*
Arena::CreateMaybeMessage< ::SCH::Student >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SCH::Student >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
